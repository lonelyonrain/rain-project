<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- druid dataSource -->
	<bean id="oracleDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="filters" value="stat,wall,log4j" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
			</list>
		</property>
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${oracle.jdbc.url}" />
		<property name="username" value="${oracle.jdbc.username}" />
		<property name="password" value="${oracle.jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${dataSource.initialSize}" />
		<property name="minIdle" value="${dataSource.minIdle}" />
		<property name="maxActive" value="${dataSource.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${dataSource.maxWait}" />
		<!--是否自动回收超时连接 -->
		<property name="removeAbandoned" value="${dataSource.removeAbandoned}" />
		<!--超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="${dataSource.removeAbandonedTimeout}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
	</bean>

	<!-- druid dataSource -->
	<bean id="mssqlDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="filters" value="stat,wall,log4j" />
		<property name="proxyFilters">
			<list>
				<!-- <ref bean="stat-filter" /> -->
			</list>
		</property>
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${mssql.jdbc.url}" />
		<property name="username" value="${mssql.jdbc.username}" />
		<property name="password" value="${mssql.jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${dataSource.initialSize}" />
		<property name="minIdle" value="${dataSource.minIdle}" />
		<property name="maxActive" value="${dataSource.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${dataSource.maxWait}" />
		<!--是否自动回收超时连接 -->
		<property name="removeAbandoned" value="${dataSource.removeAbandoned}" />
		<!--超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="${dataSource.removeAbandonedTimeout}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
	</bean>

	<!-- 数据库连接池 -->
	<bean id="dynamicDataSource" class="com.time.scenery.rain.spring.utils.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="oracleDataSource" key="oracleDataSource" />
				<entry value-ref="mssqlDataSource" key="mssqlDataSource" />
			</map>
		</property>
		<!-- 默认使用productDataSource的数据源 -->
		<property name="defaultTargetDataSource" ref="mssqlDataSource" />
	</bean>

	<!-- 定义Mybatis的SqlSessionFactory -->
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 定义数据源,数据源使用动态的数据源dynamicDataSource -->
		<property name="dataSource" ref="dynamicDataSource" />
		<!-- 指定mybatis-config.xml全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 扫描mappers目录以及子目录下的所有xml文件 -->
		<property name="mapperLocations" value="classpath*:mybatis-mapping/**/*Mapper.xml" />
		<!-- 别名扫描包 -->
		<property name="typeAliasesPackage" value="com.millery.pojo" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.time.scenery.rain.space.*" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 慢SQL记录 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="mergeSql" value="true" />
		<property name="slowSqlMillis" value="1000" />
		<property name="logSlowSql" value="true" />
	</bean>
	
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dynamicDataSource" /> 
	</bean>

	<!-- 注解方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" /> 

	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="delAndRepair" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

<!-- spring aop事物管理 -->  
     <aop:config>  
            <aop:pointcut id="transactionPointcut"   
                expression="execution(* com.johnfnash.learn.pro.dashboardserver.service..*Impl.*(..))" />  
            <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" order="2"/>  
            <!-- <aop:advisor pointcut-ref="transactionPointcut" advice-ref="dataSourceInterceptor" order="1"/> -->           
     </aop:config>  
       
     <!-- 数据源动态切换切面配置 -->  
     <aop:config>  
     <aop:aspect id="dataSourceAspect" ref="dataSourceInterceptor" order="1">  
            <aop:pointcut id="dataSourcePointcutTask"   
                expression="execution(* com.johnfnash.learn.pro.dashboardserver.service.task.*Impl.*(..))"/>  
            <aop:before pointcut-ref="dataSourcePointcutTask" method="setDS1" />  
            <aop:pointcut id="dataSourcePointcutEnv"   
                expression="execution(* com.johnfnash.learn.pro.dashboardserver.service.env.*Impl.*(..))"/>  
            <aop:before pointcut-ref="dataSourcePointcutEnv" method="setDS2" />  
        </aop:aspect>  
     </aop:config>  
       
     <!-- 数据源动态切换实体 -->  
     <bean id="dataSourceInterceptor" class="com.time.scenery.rain.spring.utils.DynamicDataSourceInterceptor"/>      

<!-- 方式一，需要为每个数据源service层单独建一个包，一个Service只能使用一个数据源 -->



	<!-- druid spring 监控客户端设置 -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.time.scenery.rain.space.restfulapi.service.*</value>
			</list>
		</property>
	</bean>
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	<!-- druid spring 监控客户端设置结束 -->
</beans>